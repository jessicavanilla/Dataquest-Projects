#!/usr/bin/env python3

import json
import locale
import sys
import emails
import reports
import os

def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  most_sales = 0
  car_most_sales = ''
  popular_car = {}
  car_year = ''
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    if item['total_sales'] > most_sales:
      most_sales = item['total_sales']
      car_most_sales = item['car']
    # TODO: also handle most popular car_year
    if item['car']['car_year'] in popular_car:
      popular_car[item['car']['car_year']] += item['total_sales']
    else:
      popular_car[item['car']['car_year']] = item['total_sales']
  car_year = list(filter(lambda x: popular_car[x] == max(popular_car.values()), popular_car))[0]

  summary = [
    "The {} generated the most revenue: ${:,}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(car_most_sales), most_sales),
    "The most popular year was {} with {} sales.".format(car_year, popular_car[car_year])
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  reports.generate('/tmp/cars.pdf', 'A Summary of Important Information of Car Data', 
  '<br/>'.join(str(line) for line in summary), cars_dict_to_table(data))
  # TODO: send the PDF report as an email attachment
  sender = 'automation@example.com'
  receiver = '{}@example.com'.format(os.environ.get('USER'))
  subject = 'Sales summary for last month'
  body = 'I have attached a pdf of the data of car sales.\n\n' + '\n'.join(str(line) for line in summary)
  message = emails.generate(sender, receiver, subject, body, '/tmp/cars.pdf')
  emails.send(message)


if __name__ == "__main__":
  main(sys.argv)

